// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mem,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.508000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=33,HLS_SYN_DSP=0,HLS_SYN_FF=134,HLS_SYN_LUT=204,HLS_VERSION=2018_3}" *)

module mem (
        ap_clk,
        ap_rst_n,
        s_axi_CRTL_BUS_AWVALID,
        s_axi_CRTL_BUS_AWREADY,
        s_axi_CRTL_BUS_AWADDR,
        s_axi_CRTL_BUS_WVALID,
        s_axi_CRTL_BUS_WREADY,
        s_axi_CRTL_BUS_WDATA,
        s_axi_CRTL_BUS_WSTRB,
        s_axi_CRTL_BUS_ARVALID,
        s_axi_CRTL_BUS_ARREADY,
        s_axi_CRTL_BUS_ARADDR,
        s_axi_CRTL_BUS_RVALID,
        s_axi_CRTL_BUS_RREADY,
        s_axi_CRTL_BUS_RDATA,
        s_axi_CRTL_BUS_RRESP,
        s_axi_CRTL_BUS_BVALID,
        s_axi_CRTL_BUS_BREADY,
        s_axi_CRTL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;
parameter    C_S_AXI_CRTL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CRTL_BUS_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CRTL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_CRTL_BUS_AWVALID;
output   s_axi_CRTL_BUS_AWREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1:0] s_axi_CRTL_BUS_AWADDR;
input   s_axi_CRTL_BUS_WVALID;
output   s_axi_CRTL_BUS_WREADY;
input  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1:0] s_axi_CRTL_BUS_WDATA;
input  [C_S_AXI_CRTL_BUS_WSTRB_WIDTH - 1:0] s_axi_CRTL_BUS_WSTRB;
input   s_axi_CRTL_BUS_ARVALID;
output   s_axi_CRTL_BUS_ARREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1:0] s_axi_CRTL_BUS_ARADDR;
output   s_axi_CRTL_BUS_RVALID;
input   s_axi_CRTL_BUS_RREADY;
output  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1:0] s_axi_CRTL_BUS_RDATA;
output  [1:0] s_axi_CRTL_BUS_RRESP;
output   s_axi_CRTL_BUS_BVALID;
input   s_axi_CRTL_BUS_BREADY;
output  [1:0] s_axi_CRTL_BUS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [15:0] a_V;
wire   [7:0] ma_V;
wire   [7:0] data_V_i;
reg   [7:0] data_V_o;
reg    data_V_o_ap_vld;
wire   [7:0] flag_V;
reg   [15:0] nvm_address0;
reg    nvm_ce0;
reg    nvm_we0;
wire   [7:0] nvm_q0;
reg   [5:0] dram_address0;
reg    dram_ce0;
reg    dram_we0;
wire   [7:0] dram_q0;
reg  signed [15:0] a_V_read_reg_175;
wire   [0:0] tmp_fu_131_p1;
reg   [0:0] tmp_reg_180;
wire   [0:0] tmp_1_fu_135_p3;
reg   [0:0] tmp_1_reg_184;
wire  signed [63:0] tmp_3_fu_143_p1;
wire  signed [63:0] tmp_6_fu_148_p1;
wire  signed [63:0] tmp_7_fu_153_p1;
wire  signed [63:0] tmp_8_fu_158_p1;
wire  signed [63:0] tmp_4_fu_163_p1;
wire    ap_CS_fsm_state2;
wire   [7:0] storemerge_in_v_fu_167_p3;
wire  signed [7:0] tmp_3_fu_143_p0;
wire  signed [7:0] tmp_6_fu_148_p0;
wire  signed [15:0] tmp_7_fu_153_p0;
wire  signed [7:0] tmp_8_fu_158_p0;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

mem_nvm #(
    .DataWidth( 8 ),
    .AddressRange( 65536 ),
    .AddressWidth( 16 ))
nvm_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(nvm_address0),
    .ce0(nvm_ce0),
    .we0(nvm_we0),
    .d0(dram_q0),
    .q0(nvm_q0)
);

mem_dram #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
dram_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(dram_address0),
    .ce0(dram_ce0),
    .we0(dram_we0),
    .d0(data_V_i),
    .q0(dram_q0)
);

mem_CRTL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CRTL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CRTL_BUS_DATA_WIDTH ))
mem_CRTL_BUS_s_axi_U(
    .AWVALID(s_axi_CRTL_BUS_AWVALID),
    .AWREADY(s_axi_CRTL_BUS_AWREADY),
    .AWADDR(s_axi_CRTL_BUS_AWADDR),
    .WVALID(s_axi_CRTL_BUS_WVALID),
    .WREADY(s_axi_CRTL_BUS_WREADY),
    .WDATA(s_axi_CRTL_BUS_WDATA),
    .WSTRB(s_axi_CRTL_BUS_WSTRB),
    .ARVALID(s_axi_CRTL_BUS_ARVALID),
    .ARREADY(s_axi_CRTL_BUS_ARREADY),
    .ARADDR(s_axi_CRTL_BUS_ARADDR),
    .RVALID(s_axi_CRTL_BUS_RVALID),
    .RREADY(s_axi_CRTL_BUS_RREADY),
    .RDATA(s_axi_CRTL_BUS_RDATA),
    .RRESP(s_axi_CRTL_BUS_RRESP),
    .BVALID(s_axi_CRTL_BUS_BVALID),
    .BREADY(s_axi_CRTL_BUS_BREADY),
    .BRESP(s_axi_CRTL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .a_V(a_V),
    .ma_V(ma_V),
    .data_V_o(data_V_o),
    .data_V_o_ap_vld(data_V_o_ap_vld),
    .data_V_i(data_V_i),
    .flag_V(flag_V)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        a_V_read_reg_175 <= a_V;
        tmp_1_reg_184 <= flag_V[32'd1];
        tmp_reg_180 <= tmp_fu_131_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_180 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        data_V_o = storemerge_in_v_fu_167_p3;
    end else begin
        data_V_o = data_V_i;
    end
end

always @ (*) begin
    if (((tmp_reg_180 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        data_V_o_ap_vld = 1'b1;
    end else begin
        data_V_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if ((tmp_fu_131_p1 == 1'd1)) begin
            dram_address0 = tmp_8_fu_158_p1;
        end else if (((tmp_1_fu_135_p3 == 1'd1) & (tmp_fu_131_p1 == 1'd0))) begin
            dram_address0 = tmp_6_fu_148_p1;
        end else if (((tmp_1_fu_135_p3 == 1'd0) & (tmp_fu_131_p1 == 1'd0))) begin
            dram_address0 = tmp_3_fu_143_p1;
        end else begin
            dram_address0 = 'bx;
        end
    end else begin
        dram_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b1) & (tmp_1_fu_135_p3 == 1'd0) & (tmp_fu_131_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start == 1'b1) & (tmp_1_fu_135_p3 == 1'd1) & (tmp_fu_131_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start == 1'b1) & (tmp_fu_131_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1)))) begin
        dram_ce0 = 1'b1;
    end else begin
        dram_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (tmp_1_fu_135_p3 == 1'd1) & (tmp_fu_131_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        dram_we0 = 1'b1;
    end else begin
        dram_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        nvm_address0 = tmp_4_fu_163_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        nvm_address0 = tmp_7_fu_153_p1;
    end else begin
        nvm_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        nvm_ce0 = 1'b1;
    end else begin
        nvm_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_reg_184 == 1'd0) & (tmp_reg_180 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        nvm_we0 = 1'b1;
    end else begin
        nvm_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign storemerge_in_v_fu_167_p3 = ((tmp_1_reg_184[0:0] === 1'b1) ? dram_q0 : nvm_q0);

assign tmp_1_fu_135_p3 = flag_V[32'd1];

assign tmp_3_fu_143_p0 = ma_V;

assign tmp_3_fu_143_p1 = tmp_3_fu_143_p0;

assign tmp_4_fu_163_p1 = a_V_read_reg_175;

assign tmp_6_fu_148_p0 = ma_V;

assign tmp_6_fu_148_p1 = tmp_6_fu_148_p0;

assign tmp_7_fu_153_p0 = a_V;

assign tmp_7_fu_153_p1 = tmp_7_fu_153_p0;

assign tmp_8_fu_158_p0 = ma_V;

assign tmp_8_fu_158_p1 = tmp_8_fu_158_p0;

assign tmp_fu_131_p1 = flag_V[0:0];

endmodule //mem
