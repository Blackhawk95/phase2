// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _mem_HH_
#define _mem_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "mem_nvm.h"
#include "mem_dram.h"
#include "mem_CRTL_BUS_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_CRTL_BUS_ADDR_WIDTH = 6,
         unsigned int C_S_AXI_CRTL_BUS_DATA_WIDTH = 32>
struct mem : public sc_module {
    // Port declarations 20
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > s_axi_CRTL_BUS_AWVALID;
    sc_out< sc_logic > s_axi_CRTL_BUS_AWREADY;
    sc_in< sc_uint<C_S_AXI_CRTL_BUS_ADDR_WIDTH> > s_axi_CRTL_BUS_AWADDR;
    sc_in< sc_logic > s_axi_CRTL_BUS_WVALID;
    sc_out< sc_logic > s_axi_CRTL_BUS_WREADY;
    sc_in< sc_uint<C_S_AXI_CRTL_BUS_DATA_WIDTH> > s_axi_CRTL_BUS_WDATA;
    sc_in< sc_uint<C_S_AXI_CRTL_BUS_DATA_WIDTH/8> > s_axi_CRTL_BUS_WSTRB;
    sc_in< sc_logic > s_axi_CRTL_BUS_ARVALID;
    sc_out< sc_logic > s_axi_CRTL_BUS_ARREADY;
    sc_in< sc_uint<C_S_AXI_CRTL_BUS_ADDR_WIDTH> > s_axi_CRTL_BUS_ARADDR;
    sc_out< sc_logic > s_axi_CRTL_BUS_RVALID;
    sc_in< sc_logic > s_axi_CRTL_BUS_RREADY;
    sc_out< sc_uint<C_S_AXI_CRTL_BUS_DATA_WIDTH> > s_axi_CRTL_BUS_RDATA;
    sc_out< sc_lv<2> > s_axi_CRTL_BUS_RRESP;
    sc_out< sc_logic > s_axi_CRTL_BUS_BVALID;
    sc_in< sc_logic > s_axi_CRTL_BUS_BREADY;
    sc_out< sc_lv<2> > s_axi_CRTL_BUS_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    mem(sc_module_name name);
    SC_HAS_PROCESS(mem);

    ~mem();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    mem_nvm* nvm_U;
    mem_dram* dram_U;
    mem_CRTL_BUS_s_axi<C_S_AXI_CRTL_BUS_ADDR_WIDTH,C_S_AXI_CRTL_BUS_DATA_WIDTH>* mem_CRTL_BUS_s_axi_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<16> > a_V;
    sc_signal< sc_lv<8> > ma_V;
    sc_signal< sc_lv<8> > data_V_i;
    sc_signal< sc_lv<8> > data_V_o;
    sc_signal< sc_logic > data_V_o_ap_vld;
    sc_signal< sc_lv<8> > flag_V;
    sc_signal< sc_lv<16> > nvm_address0;
    sc_signal< sc_logic > nvm_ce0;
    sc_signal< sc_logic > nvm_we0;
    sc_signal< sc_lv<8> > nvm_q0;
    sc_signal< sc_lv<6> > dram_address0;
    sc_signal< sc_logic > dram_ce0;
    sc_signal< sc_logic > dram_we0;
    sc_signal< sc_lv<8> > dram_q0;
    sc_signal< sc_lv<16> > a_V_read_reg_175;
    sc_signal< sc_lv<1> > tmp_fu_131_p1;
    sc_signal< sc_lv<1> > tmp_reg_180;
    sc_signal< sc_lv<1> > tmp_1_fu_135_p3;
    sc_signal< sc_lv<1> > tmp_1_reg_184;
    sc_signal< sc_lv<64> > tmp_3_fu_143_p1;
    sc_signal< sc_lv<64> > tmp_6_fu_148_p1;
    sc_signal< sc_lv<64> > tmp_7_fu_153_p1;
    sc_signal< sc_lv<64> > tmp_8_fu_158_p1;
    sc_signal< sc_lv<64> > tmp_4_fu_163_p1;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<8> > storemerge_in_v_fu_167_p3;
    sc_signal< sc_lv<8> > tmp_3_fu_143_p0;
    sc_signal< sc_lv<8> > tmp_6_fu_148_p0;
    sc_signal< sc_lv<16> > tmp_7_fu_153_p0;
    sc_signal< sc_lv<8> > tmp_8_fu_158_p0;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_state2;
    static const sc_lv<32> ap_const_lv32_0;
    static const int C_S_AXI_DATA_WIDTH;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_data_V_o();
    void thread_data_V_o_ap_vld();
    void thread_dram_address0();
    void thread_dram_ce0();
    void thread_dram_we0();
    void thread_nvm_address0();
    void thread_nvm_ce0();
    void thread_nvm_we0();
    void thread_storemerge_in_v_fu_167_p3();
    void thread_tmp_1_fu_135_p3();
    void thread_tmp_3_fu_143_p0();
    void thread_tmp_3_fu_143_p1();
    void thread_tmp_4_fu_163_p1();
    void thread_tmp_6_fu_148_p0();
    void thread_tmp_6_fu_148_p1();
    void thread_tmp_7_fu_153_p0();
    void thread_tmp_7_fu_153_p1();
    void thread_tmp_8_fu_158_p0();
    void thread_tmp_8_fu_158_p1();
    void thread_tmp_fu_131_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
